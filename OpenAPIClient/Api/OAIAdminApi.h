#import <Foundation/Foundation.h>
#import "OAIAdminNewUser.h"
#import "OAIFreePass.h"
#import "OAIFreePassInput.h"
#import "OAIInlineResponse400.h"
#import "OAIInlineResponse415.h"
#import "OAILoginResponse.h"
#import "OAISearchQuery.h"
#import "OAISearchResult.h"
#import "OAIApi.h"

/**
* Persona
* KSF Media unified login service
*
* The version of the OpenAPI document: 1.3.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIAdminApi: NSObject <OAIApi>

extern NSString* kOAIAdminApiErrorDomain;
extern NSInteger kOAIAdminApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Revokes an existing free pass
/// Marks a free pass as being revoked so that it can't be used anymore. Currently, revoked free passes can't be reinstated through Persona API (though it's possible to do so with an SQL query).
///
/// @param body 
/// @param authUser  (optional)
/// @param authorization  (optional)
/// 
///  code:200 message:"",
///  code:400 message:"Invalid `body` or `Authorization` or `AuthUser`"
///
/// @return void
-(NSURLSessionTask*) adminFreePassDeleteWithBody: (NSString*) body
    authUser: (NSString*) authUser
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSError* error)) handler;


/// Creates a free pass to an article
/// Free passes can be used to temporarily bypass the paywall for individual articles.
///
/// @param body 
/// @param authUser  (optional)
/// @param authorization  (optional)
/// 
///  code:200 message:"",
///  code:400 message:"Invalid `body` or `Authorization` or `AuthUser`"
///
/// @return NSString*
-(NSURLSessionTask*) adminFreePassPostWithBody: (OAIFreePassInput*) body
    authUser: (NSString*) authUser
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Lists all free passes
/// This end point returns the list of all free passes, including those that have been expired or revoked.
///
/// @param authUser  (optional)
/// @param authorization  (optional)
/// 
///  code:200 message:"",
///  code:400 message:"Invalid `Authorization` or `AuthUser`"
///
/// @return NSArray<OAIFreePass>*
-(NSURLSessionTask*) adminFreePassesGetWithAuthUser: (NSString*) authUser
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSArray<OAIFreePass>* output, NSError* error)) handler;


/// Search for users
/// 
///
/// @param body 
/// @param authUser  (optional)
/// @param authorization  (optional)
/// 
///  code:200 message:"",
///  code:400 message:"Invalid `body` or `Authorization` or `AuthUser`",
///  code:415 message:"Unsupported media type"
///
/// @return NSArray<OAISearchResult>*
-(NSURLSessionTask*) adminSearchPostWithBody: (OAISearchQuery*) body
    authUser: (NSString*) authUser
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSArray<OAISearchResult>* output, NSError* error)) handler;


/// Transfers passive customers from Kayak to Mailchimp
/// Passive subscribers/members/customers are users who don't have active entitlements and haven't opted out from email marketing. For the given list (audience) ID, this endpoint transfers the list of passive subscribers from Kayak to Mailchimp (via Faro).
///
/// @param listid 
/// @param authUser  (optional)
/// @param authorization  (optional)
/// 
///  code:200 message:"",
///  code:400 message:"Invalid `listid` or `Authorization` or `AuthUser`",
///  code:403 message:"",
///  code:500 message:""
///
/// @return NSObject*
-(NSURLSessionTask*) adminTransferPassiveSubscribersListidPostWithListid: (NSString*) listid
    authUser: (NSString*) authUser
    authorization: (NSString*) authorization
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Create a new user with admin options.
/// 
///
/// @param body 
/// @param authUser  (optional)
/// @param authorization  (optional)
/// 
///  code:200 message:"",
///  code:400 message:"Invalid `body` or `Authorization` or `AuthUser`",
///  code:415 message:"Unsupported media type"
///
/// @return OAILoginResponse*
-(NSURLSessionTask*) adminUserPostWithBody: (OAIAdminNewUser*) body
    authUser: (NSString*) authUser
    authorization: (NSString*) authorization
    completionHandler: (void (^)(OAILoginResponse* output, NSError* error)) handler;



@end
